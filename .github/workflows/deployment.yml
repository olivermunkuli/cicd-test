name: Build, Create Docker Image, and Push to Docker Hub

on:
  push:
    branches:
      - main  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'  

    - name: Restore dependencies
      run: dotnet restore

    - name: Build projects
      id: build-projects
      run: |
        dotnet build DockerTester/DockerTester.csproj --configuration Release
        dotnet build AutogasSA.Common.Logging/AutogasSA.Common.Logging.csproj --configuration Release
        dotnet build AutogasSA.Common.Logging.Interfaces/AutogasSA.Common.Logging.Interfaces.csproj --configuration Release
        dotnet build AutogasSA.Common.Utilities/AutogasSA.Common.Utilities.csproj --configuration Release
        dotnet build AutogasSA.Common.Logging.Tests/AutogasSA.Common.Logging.Tests.csproj --configuration Release
 
    - name: Run unit tests
      id: run-unit-tests
      if: steps.build-projects.outcome == 'success'
      run: dotnet test AutogasSA.Common.Logging.Tests/AutogasSA.Common.Logging.Tests.csproj --configuration Release

    - name: Publish main project
      id: publish-main-project
      if: steps.run-unit-tests.outcome == 'success'
      run: dotnet publish DockerTester/DockerTester.csproj --configuration Release --output ./publish/DockerTester
   
    - name: Log into docker Hub  
      id: log-into-dockerhub
      if: steps.publish-main-project.outcome == 'success'
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Build docker image for github
      id: build-docker-image-github
      if: steps.log-into-dockerhub.outcome == 'success'
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-tester:1.0.5 -f Dockerfile .

    - name: Push docker image to docker hub
      if: steps.build-docker-image-github.outcome == 'success'
      run: docker push ${{ secrets.DOCKER_USERNAME }}/docker-tester:1.0.5

    - name: Log into AWS ECR
      id: ecr-login
      if: steps.publish-main-project.outcome == 'success'
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
        
    - name: Build docker image for aws ecr
      id: build-docker-ecr-image
      if: steps.ecr-login.outcome == 'success' 
      run: docker build -t docker-tester:1.0.0 -f Dockerfile .
    
    - name: Tag docker image 
      id: tag-docker-ecr-image
      if: steps.build-docker-ecr-image.outcome == 'success' 
      run: docker tag docker-tester:1.0.0 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/docker-tester:1.0.0

    - name: Push docker image to aws ecr
      id: push-docker-image-ecr
      if: steps.tag-docker-ecr-image.outcome == 'success' 
      run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/docker-tester:1.0.0